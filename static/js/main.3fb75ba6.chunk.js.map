{"version":3,"sources":["components/Shape.js","constants/arrays.js","utils/svg.js","components/Scene.js","utils/googleApi.js","constants/string.js","index.js"],"names":["Shape","shape","rotation","position","color","opacity","index","mesh","interpolate","x","y","z","meshPhongMaterial","attach","side","THREE","depthWrite","transparent","args","colors","paths","map","name","url","Promise","resolve","loader","load","shapes","flatten","group","toShapes","Scene","useState","page","setPage","setShapes","useEffect","setInterval","i","length","then","useSpring","transitions","useTransition","item","uuid","from","Math","PI","enter","leave","order","trail","lazy","scale","degToRad","depthTest","key","props","emotionApiUrl","text","process","entityApiUrl","requestGoogleNlpApi","mode","a","fetch","response","json","console","log","ReactDOM","render","result","concurrent","camera","fov","near","far","intensity","document","getElementById"],"mappings":"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","file":"static/js/main.3fb75ba6.chunk.js","sourcesContent":["import * as THREE from \"three\";\nimport React from \"react\";\nimport { animated as a } from \"react-spring/three\";\n\nfunction Shape({ shape, rotation, position, color, opacity, index }) {\n  return (\n    <a.mesh\n      rotation={rotation}\n      position={position.interpolate((x, y, z) => [x, y, z + -index * 50])}\n    >\n      <a.meshPhongMaterial\n        attach=\"material\"\n        color={color}\n        opacity={opacity}\n        side={THREE.DoubleSide}\n        depthWrite={false}\n        transparent\n      />\n      <shapeBufferGeometry attach=\"geometry\" args={[shape]} />\n    </a.mesh>\n  );\n}\n\nexport default Shape;\n","export const colors = [\n  \"#ffbcb7\",\n  \"#21242d\",\n  \"#ea5158\",\n  \"#0d4663\",\n  \"#2d4a3e\",\n  \"#8bd8d2\"\n];\n\nexport const svgs = [\n  \"happy\",\n  \"sad\",\n  \"angry\",\n  \"surprise\",\n  \"calm\",\n  \"anticipated\"\n];\n","import { SVGLoader as loader } from \"three/examples/jsm/loaders/SVGLoader\";\nimport flatten from \"lodash-es/flatten\";\n\nimport { svgs } from \"../constants/arrays\";\n\nexport const paths = svgs\n  .map(\n    name =>\n      `https://raw.githubusercontent.com/doong-jo/irony-mechanical-analysis/master/src/resources/images/svg/sad.svg`\n  )\n  .map(\n    url =>\n      new Promise(resolve =>\n        new loader().load(url, shapes =>\n          resolve(\n            flatten(\n              shapes.paths.map((group, index) =>\n                group\n                  .toShapes(true)\n                  .map(shape => ({ shape, color: group.color, index }))\n              )\n            )\n          )\n        )\n      )\n  );\n","import * as THREE from \"three\";\nimport React, { useState, useEffect } from \"react\";\nimport { useTransition, useSpring, animated as a } from \"react-spring/three\";\n\nimport Shape from \"./Shape\";\nimport { colors } from \"../constants/arrays\";\nimport { paths } from \"../utils/svg\";\n\nfunction Scene() {\n  const [page, setPage] = useState(0);\n  const [shapes, setShapes] = useState([]);\n  // Switches scenes every 4 seconds\n  useEffect(\n    () => void setInterval(() => setPage(i => (i + 1) % paths.length), 3500),\n    []\n  );\n  // Converts current SVG into mesh-shapes: https://threejs.org/docs/index.html#examples/loaders/SVGLoader\n  useEffect(() => void paths[page].then(setShapes), [page]);\n  // This spring controls the background color animation\n  const { color } = useSpring({ color: colors[page] });\n  // This one is like a transition group, but instead of handling div's it mounts/unmounts meshes in a fancy way\n  const transitions = useTransition(shapes, item => item.shape.uuid, {\n    from: {\n      rotation: [0.0, -Math.PI / 4, 0],\n      position: [0, 50, -200],\n      opacity: 0\n    },\n    enter: { rotation: [0, 0, 0], position: [0, 0, 0], opacity: 1 },\n    leave: { rotation: [0, 0.25, 0], position: [0, -50, 10], opacity: 0 },\n    order: [\"leave\", \"enter\", \"update\"],\n    trail: 5,\n    lazy: true\n  });\n  return (\n    <>\n      <mesh\n        scale={[20000, 20000, 1]}\n        rotation={[0, THREE.Math.degToRad(-20), 0]}\n      >\n        <planeGeometry attach=\"geometry\" args={[1, 1]} />\n        <a.meshPhongMaterial\n          attach=\"material\"\n          color={color}\n          depthTest={false}\n        />\n      </mesh>\n      <group\n        position={[1600, -700, page]}\n        rotation={[0, THREE.Math.degToRad(180), 0]}\n      >\n        {transitions.map(({ item, key, props }) => (\n          <Shape key={key} {...item} {...props} />\n        ))}\n      </group>\n    </>\n  );\n}\n\nexport default Scene;\n","import { NLP_EMOTION, NLP_ENTITY } from \"../constants/string\";\n\nconst { REACT_APP_GOOGLE_API_SERVER_URL } = process.env;\n\nconst emotionApiUrl = text =>\n  `${REACT_APP_GOOGLE_API_SERVER_URL}/api/gcp-lang/emotion?text=${text}`;\nconst entityApiUrl = text =>\n  `${REACT_APP_GOOGLE_API_SERVER_URL}/api/gcp-lang/entity?text=${text}`;\n\nconsole.log(REACT_APP_GOOGLE_API_SERVER_URL);\n\nexport async function requestGoogleNlpApi(text, mode) {\n  let response;\n\n  switch (mode) {\n    case NLP_EMOTION:\n      response = await fetch(emotionApiUrl(text));\n      break;\n\n    case NLP_ENTITY:\n      response = await fetch(entityApiUrl(text));\n      break;\n\n    default:\n      return;\n  }\n\n  const json = await response.json();\n  return json;\n}\n","export const NLP_ENTITY = \"ENTITY\";\nexport const NLP_EMOTION = \"EMOTION\";\n","// Illustrations @ Tina Henschel: https://www.instagram.com/tina.henschel\n\nimport * as THREE from \"three\";\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport { Canvas } from \"react-three-fiber\";\n\nimport Scene from \"./components/Scene\";\nimport { requestGoogleNlpApi } from \"./utils/googleApi\";\n\nimport \"./styles.css\";\nimport { NLP_EMOTION } from \"./constants/string\";\n\n/** Main component */\nfunction App() {\n  (async function test() {\n    const result = await requestGoogleNlpApi(\"i am sad\", NLP_EMOTION);\n    console.log(result);\n  })();\n\n  return (\n    <Canvas\n      concurrent\n      camera={{\n        fov: 80,\n        position: [0, 0, 2000],\n        rotation: [0, THREE.Math.degToRad(-20), THREE.Math.degToRad(180)],\n        near: 0.1,\n        far: 20000\n      }}\n    >\n      <ambientLight intensity={0.5} />\n      <spotLight intensity={0.5} position={[300, 300, 4000]} />\n      <Scene />\n    </Canvas>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}