{"version":3,"sources":["index.js"],"names":["colors","svgs","map","name","url","Promise","resolve","loader","load","shapes","flatten","paths","group","index","toShapes","shape","color","Shape","rotation","position","opacity","mesh","interpolate","x","y","z","meshPhongMaterial","attach","side","THREE","depthWrite","transparent","args","Scene","useState","page","setPage","setShapes","useEffect","setInterval","i","length","then","useSpring","transitions","useTransition","item","uuid","from","Math","PI","enter","leave","order","trail","lazy","scale","degToRad","depthTest","key","props","ReactDOM","render","concurrent","camera","fov","near","far","intensity","document","getElementById"],"mappings":"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","file":"static/js/main.a5270ae2.chunk.js","sourcesContent":["// Illustrations @ Tina Henschel: https://www.instagram.com/tina.henschel\n\nimport * as THREE from 'three'\nimport { SVGLoader as loader } from 'three/examples/jsm/loaders/SVGLoader'\nimport flatten from 'lodash-es/flatten'\nimport ReactDOM from 'react-dom'\nimport React, { useState, useEffect } from 'react'\n// A React renderer for Three-js: https://github.com/drcmda/react-three-fiber\nimport { Canvas } from 'react-three-fiber'\n// A React x-platform animation library: https://github.com/react-spring/react-spring\nimport { useTransition, useSpring, animated as a } from 'react-spring/three'\nimport './styles.css'\n\nconst colors = ['#21242d', '#ea5158', '#0d4663', '#ffbcb7', '#2d4a3e', '#8bd8d2']\nconst svgs = ['night', 'city', 'morning', 'tubes', 'woods', 'beach']\n  .map(name => `https://raw.githubusercontent.com/drcmda/react-three-fiber/master/examples/src/resources/images/svg/${name}.svg`)\n  .map(\n    url =>\n      new Promise(resolve =>\n        new loader().load(url, shapes =>\n          resolve(flatten(shapes.paths.map((group, index) => group.toShapes(true).map(shape => ({ shape, color: group.color, index })))))\n        )\n      )\n  )\n\n/** This component renders a shape */\nfunction Shape({ shape, rotation, position, color, opacity, index }) {\n  return (\n    <a.mesh rotation={rotation} position={position.interpolate((x, y, z) => [x, y, z + -index * 50])}>\n      <a.meshPhongMaterial attach=\"material\" color={color} opacity={opacity} side={THREE.DoubleSide} depthWrite={false} transparent />\n      <shapeBufferGeometry attach=\"geometry\" args={[shape]} />\n    </a.mesh>\n  )\n}\n\n/** This component sets up a background plane and transitions a group of shapes */\nfunction Scene() {\n  const [page, setPage] = useState(0)\n  const [shapes, setShapes] = useState([])\n  // Switches scenes every 4 seconds\n  useEffect(() => void setInterval(() => setPage(i => (i + 1) % svgs.length), 3500), [])\n  // Converts current SVG into mesh-shapes: https://threejs.org/docs/index.html#examples/loaders/SVGLoader\n  useEffect(() => void svgs[page].then(setShapes), [page])\n  // This spring controls the background color animation\n  const { color } = useSpring({ color: colors[page] })\n  // This one is like a transition group, but instead of handling div's it mounts/unmounts meshes in a fancy way\n  const transitions = useTransition(shapes, item => item.shape.uuid, {\n    from: { rotation: [0.0, -Math.PI / 4, 0], position: [0, 50, -200], opacity: 0 },\n    enter: { rotation: [0, 0, 0], position: [0, 0, 0], opacity: 1 },\n    leave: { rotation: [0, 0.25, 0], position: [0, -50, 10], opacity: 0 },\n    order: ['leave', 'enter', 'update'],\n    trail: 5,\n    lazy: true\n  })\n  return (\n    <>\n      <mesh scale={[20000, 20000, 1]} rotation={[0, THREE.Math.degToRad(-20), 0]}>\n        <planeGeometry attach=\"geometry\" args={[1, 1]} />\n        <a.meshPhongMaterial attach=\"material\" color={color} depthTest={false} />\n      </mesh>\n      <group position={[1600, -700, page]} rotation={[0, THREE.Math.degToRad(180), 0]}>\n        {transitions.map(({ item, key, props }) => (\n          <Shape key={key} {...item} {...props} />\n        ))}\n      </group>\n    </>\n  )\n}\n\n/** Main component */\nfunction App() {\n  return (\n    <Canvas\n      concurrent\n      camera={{\n        fov: 80,\n        position: [0, 0, 2000],\n        rotation: [0, THREE.Math.degToRad(-20), THREE.Math.degToRad(180)],\n        near: 0.1,\n        far: 20000\n      }}>\n      <ambientLight intensity={0.5} />\n      <spotLight intensity={0.5} position={[300, 300, 4000]} />\n      <Scene />\n    </Canvas>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}